// netlify/functions/sendToTelegram.js
const fetch = require('node-fetch');

exports.handler = async (event) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method Not Allowed' })
    };
  }

  try {
    const { BOT_TOKEN, CHAT_IDS } = process.env;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!BOT_TOKEN || !CHAT_IDS) {
      console.error('Missing environment variables: BOT_TOKEN or CHAT_IDS');
      return {
        statusCode: 500,
        body: JSON.stringify({ error: 'Server configuration error' })
      };
    }
    
    const formData = JSON.parse(event.body);
    
    const { firstName, lastName, birthDate, phone, social, gender, contactMethod, services } = formData;

    let message = `üì© <b>–í–∞–º –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n\n`;
    message += `<b>–ò–º—è:</b> ${firstName}\n`;
    message += `<b>–§–∞–º–∏–ª–∏—è:</b> ${lastName}\n`;
    message += `<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ${birthDate}\n`;
    message += `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}\n`;
    message += `<b>–°–æ—Ü—Å–µ—Ç—å:</b> ${social}\n`;
    message += `<b>–ü–æ–ª:</b> ${gender}\n`;
    message += `<b>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</b> ${contactMethod}\n`;
    message += `<b>–£—Å–ª—É–≥–∏:</b> ${services}`;

    const chatIdsArray = CHAT_IDS.split(',');
    const results = [];
    
    for (const chatId of chatIdsArray) {
      try {
        const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
        const params = {
          chat_id: chatId.trim(),
          text: message,
          parse_mode: 'HTML',
        };

        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(params),
        });
        
        const result = await response.json();
        results.push({ chatId, success: response.ok, result });
        
        if (!response.ok) {
          console.error(`Error sending to chat ${chatId}:`, result);
        }
        
      } catch (error) {
        console.error(`Error with chat ${chatId}:`, error);
        results.push({ chatId, success: false, error: error.message });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–ø—Ä–∞–≤
    const hasSuccess = results.some(r => r.success);
    
    if (hasSuccess) {
      return {
        statusCode: 200,
        body: JSON.stringify({ 
          message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã',
          results: results 
        })
      };
    } else {
      return {
        statusCode: 500,
        body: JSON.stringify({ 
          error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã',
          details: results 
        })
      };
    }
  } catch (error) {
    console.error('Error:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message })
    };
  }
};